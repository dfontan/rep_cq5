<project xmlns="http://maven.apache.org/POM/4.0.0" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:schemaLocation="http://maven.apache.org/POM/4.0.0 http://maven.apache.org/xsd/maven-4.0.0.xsd">
  <modelVersion>4.0.0</modelVersion>
  <groupId>pl.kwi</groupId>
  <artifactId>Cq5-helloWorld-htmlForm-validation-tests</artifactId>
  <version>0.1</version>
  <packaging>bundle</packaging>
  <description>Test CQ project</description>
  
  
  
  <properties>
  	<!-- Properties with location of file properties -->
	<project.properties.file>project.properties</project.properties.file>
  </properties>
  
  
  
  <profiles>
  
  	<profile>
		<id>author</id>
		<activation>
			<activeByDefault>true</activeByDefault>
		</activation>				
		<properties>							
			<crx.url>${author.crx.url}</crx.url>
			<crx.user>${author.crx.user}</crx.user>
  			<crx.password>${author.crx.password}</crx.password>				
		</properties>
	</profile>
	
	<profile>
		<id>publish</id>				
		<properties>							
			<crx.url>${publish.crx.url}</crx.url>
			<crx.user>${publish.crx.user}</crx.user>
  			<crx.password>${publish.crx.password}</crx.password>				
		</properties>
	</profile>
	
	<profile>
		<id>components</id>
		<activation>
			<activeByDefault>true</activeByDefault>
		</activation>				
		<properties>							
			<assembly.id>components</assembly.id>
		</properties>
	</profile>
	
	<profile>
		<id>content</id>
		<properties>							
			<assembly.id>content</assembly.id>
		</properties>
	</profile>
	
	<profile>
		<id>unit</id>		
		<build>
			<plugins>
				<plugin>
		            <groupId>org.apache.maven.plugins</groupId>
		            <artifactId>maven-surefire-plugin</artifactId>
		            <version>2.16</version>
		            <configuration>			            	
		                <skip>true</skip>			                
		            </configuration>
		            <executions>
				       <execution>
				          <id>unit-tests</id>
				          <phase>test</phase>
				          <goals>
				             <goal>test</goal>
				          </goals>
				          <configuration>			            	
		                	<skip>false</skip>
		                	<includes>
           						<include>**/*Test.java</include>
           					</includes>
		                	<excludes>
               					<exclude>**/IntgTests.java</exclude>
               					<exclude>**/AccptTests.java</exclude>
           					</excludes>
		            	  </configuration>
				        </execution>					        
				     </executions>			              
		        </plugin>			        
			</plugins>
		</build>			
	</profile>
	
	<profile>
		<id>accept</id>
		<properties>							
			<assembly.id>accept</assembly.id>
		</properties>		
		<build>
			<plugins>				
		        
	  			<plugin>
					<groupId>org.apache.maven.plugins</groupId>
					<artifactId>maven-assembly-plugin</artifactId>
					<version>2.4</version>
					<configuration>
						<descriptors>
							<descriptor>src/main/assembly/${assembly.id}.xml</descriptor>
						</descriptors>
					</configuration>
					<executions>
						<execution>
							<id>${assembly.id}</id>
							<phase>test</phase>
							<goals>
								<goal>single</goal>
							</goals>
						</execution>
					</executions>
				</plugin>
		        
		        <plugin>
	                <groupId>org.codehaus.gmaven</groupId>
	                <artifactId>gmaven-plugin</artifactId>
	                <version>1.2</version>	                
	                <executions>
	                    <execution>
	                    	<id>accept-content-deploy-author</id>
	                        <phase>test</phase>
	                        <goals>
	                            <goal>execute</goal>
	                        </goals>
	                        <configuration>
	                            <defaults>
	                                <cqservers>${author.crx.url}</cqservers>
	                                <cquser>${author.crx.user}</cquser>
	                                <cqpassword>${author.crx.password}</cqpassword>
	                                <packageName>${project.build.finalName}-${assembly.id}.zip</packageName>
	                                <projectDir>${basedir}</projectDir>
	                            </defaults>
	                            <source>
	                                import org.apache.commons.httpclient.*
	                                import org.apache.commons.httpclient.methods.*
	                                import org.apache.commons.httpclient.auth.*
	                                import org.apache.commons.httpclient.methods.multipart.*
	
	                                //method declaration for execute of PostMethod
	                                def executePost(httpclient, httppost, outputResponse){
	                                    try {
	                                        httpclient.executeMethod(httppost);
	                                        if (outputResponse){
	                                            println httppost.responseBodyAsString
	                                        }
	                                    } catch (Exception e) {
	                                        println("exception: " + e)
	                                    } finally {
	                                        httppost.releaseConnection()
	                                    }
	                                }
	
	                                def uploadAndInstall(hostPort, packageName, projectRoot, httpclient){
	                                    //upload package
	                                    def httppost = new PostMethod(hostPort + '/crx/packmgr/service.jsp')	                                    
	                                    def file = new File(projectRoot + '/target/' + packageName)
	
	                                    println("Installing package " + packageName + " to " + hostPort)
	
	                                    if(file.exists()){
	
	                                        def parts = [new FilePart("file", file)] as Part[]
	                                        httppost.setRequestEntity(new MultipartRequestEntity(parts,
	                                        httppost.getParams()))
	
	                                        executePost(httpclient, httppost, true)
	
	                                        //install package
	                                        def installURL = hostPort + '/crx/packmgr/service/.json/etc/packages/' + packageName
	                                        println('INASTALL: ' + installURL)
	                                        httppost = new PostMethod(installURL)
	                                        httppost.addParameter("cmd", "install")
	
	                                        executePost(httpclient, httppost, true)
	                                    } else {
	                                        println("File does not exist for " + packageName + ". Not Deploying.")
	                                    }
	                                }
	
	                                def user = project.properties['cquser']
	                                def pass = project.properties['cqpassword']
	                                def packageName = project.properties['packageName']
	                                def projectRoot = project.properties['projectDir']
	
	                                // set up the client
	                                def httpclient = new HttpClient()
	                                def defaultcreds = new UsernamePasswordCredentials(user, pass)
	                                httpclient.getState().setCredentials(AuthScope.ANY, defaultcreds)
	                                httpclient.getParams().setAuthenticationPreemptive(true)
	
	                                println "CQSERVERS:" + project.properties['cqservers']
	
	                                project.properties['cqservers'].tokenize(',').each {
	                                    uploadAndInstall(it, packageName, projectRoot, httpclient)
	                                }	
	                            </source>
	                        </configuration>
	                    </execution>
	                    <execution>
	                    	<id>accept-content-deploy-publish</id>
	                        <phase>test</phase>
	                        <goals>
	                            <goal>execute</goal>
	                        </goals>
	                        <configuration>
	                            <defaults>
	                                <cqservers>${accept.crx.url}</cqservers>
	                                <cquser>${accept.crx.user}</cquser>
	                                <cqpassword>${accept.crx.password}</cqpassword>
	                                <packageName>${project.build.finalName}-${assembly.id}.zip</packageName>
	                                <projectDir>${basedir}</projectDir>
	                            </defaults>
	                            <source>
	                                import org.apache.commons.httpclient.*
	                                import org.apache.commons.httpclient.methods.*
	                                import org.apache.commons.httpclient.auth.*
	                                import org.apache.commons.httpclient.methods.multipart.*
	
	                                //method declaration for execute of PostMethod
	                                def executePost(httpclient, httppost, outputResponse){
	                                    try {
	                                        httpclient.executeMethod(httppost);
	                                        if (outputResponse){
	                                            println httppost.responseBodyAsString
	                                        }
	                                    } catch (Exception e) {
	                                        println("exception: " + e)
	                                    } finally {
	                                        httppost.releaseConnection()
	                                    }
	                                }
	
	                                def uploadAndInstall(hostPort, packageName, projectRoot, httpclient){
	                                    //upload package
	                                    def httppost = new PostMethod(hostPort + '/crx/packmgr/service.jsp')	                                    
	                                    def file = new File(projectRoot + '/target/' + packageName)
	
	                                    println("Installing package " + packageName + " to " + hostPort)
	
	                                    if(file.exists()){
	
	                                        def parts = [new FilePart("file", file)] as Part[]
	                                        httppost.setRequestEntity(new MultipartRequestEntity(parts,
	                                        httppost.getParams()))
	
	                                        executePost(httpclient, httppost, true)
	
	                                        //install package
	                                        def installURL = hostPort + '/crx/packmgr/service/.json/etc/packages/' + packageName
	                                        println('INASTALL: ' + installURL)
	                                        httppost = new PostMethod(installURL)
	                                        httppost.addParameter("cmd", "install")
	
	                                        executePost(httpclient, httppost, true)
	                                    } else {
	                                        println("File does not exist for " + packageName + ". Not Deploying.")
	                                    }
	                                }
	
	                                def user = project.properties['cquser']
	                                def pass = project.properties['cqpassword']
	                                def packageName = project.properties['packageName']
	                                def projectRoot = project.properties['projectDir']
	
	                                // set up the client
	                                def httpclient = new HttpClient()
	                                def defaultcreds = new UsernamePasswordCredentials(user, pass)
	                                httpclient.getState().setCredentials(AuthScope.ANY, defaultcreds)
	                                httpclient.getParams().setAuthenticationPreemptive(true)
	
	                                println "CQSERVERS:" + project.properties['cqservers']
	
	                                project.properties['cqservers'].tokenize(',').each {
	                                    uploadAndInstall(it, packageName, projectRoot, httpclient)
	                                }	
	                            </source>
	                        </configuration>
	                    </execution>
	                </executions>
	                <dependencies>
	                    <dependency>
	                        <groupId>org.codehaus.gmaven.runtime</groupId>
	                        <artifactId>gmaven-runtime-1.7</artifactId>
	                        <version>1.2</version>
	                    </dependency>
	                    <dependency>
	                        <groupId>commons-httpclient</groupId>
	                        <artifactId>commons-httpclient</artifactId>
	                        <version>3.1</version>
	                    </dependency>
	                    <dependency>
	                        <groupId>commons-logging</groupId>
	                        <artifactId>commons-logging</artifactId>
	                        <version>1.1.1</version>
	                        <type>jar</type>
	                        <scope>compile</scope>
	                    </dependency>
	                </dependencies>
	            </plugin>
	            
	            <plugin>
		            <groupId>org.apache.maven.plugins</groupId>
		            <artifactId>maven-surefire-plugin</artifactId>
		            <version>2.16</version>
		            <configuration>			            	
		                <skip>true</skip>			                
		            </configuration>
		            <executions>
				       <execution>
				          <id>unit-tests</id>
				          <phase>test</phase>
				          <goals>
				             <goal>test</goal>
				          </goals>				          
				          <configuration>			            	
		                	<skip>false</skip>
		                	<systemPropertyVariables>
					            <accept.host>http://localhost:4503</accept.host>
					            <accept.init.context>${accept.init.context}</accept.init.context>
					         </systemPropertyVariables>
		                	<includes>
           						<include>**/AccptTests.java</include>
           					</includes>
		                	<excludes>
               					<exclude>**/*Test.java</exclude>
               					<exclude>**/IntgTests.java</exclude>
           					</excludes>
		            	  </configuration>
				        </execution>					        
				     </executions>			              
		        </plugin>

			</plugins>
		</build>			
	</profile>
	
  </profiles>
    
  
  
  <build>
		<plugins>
		
			<plugin>
				<groupId>org.apache.maven.plugins</groupId>
				<artifactId>maven-compiler-plugin</artifactId>
				<configuration>
					<source>1.5</source>
					<target>1.5</target>
				</configuration>
			</plugin>
			
			<!-- Plugin removing activator class -->
  			<plugin>
		       <groupId>org.apache.felix</groupId>
		       <artifactId>maven-scr-plugin</artifactId>
		       <version>1.2.0</version>
		        <executions>
		            <execution>
		                <id>generate-scr-scrdescriptor</id>
		                <goals>
		                    <goal>scr</goal>
		               </goals>
		           </execution>
		       </executions>
		   </plugin>
			
			<!-- Plugin creating manifest -->
			<plugin>
  				<groupId>org.apache.felix</groupId>
  				<artifactId>maven-bundle-plugin</artifactId>
  				<version>1.4.3</version>
  				<extensions>true</extensions>
  				<configuration>
  					<instructions>
  						<Bundle-Name>${project.artifactId}</Bundle-Name>
  						<Bundle-SymbolicName>${project.groupId}</Bundle-SymbolicName>
  						<Bundle-Version>${maven.build.timestamp}</Bundle-Version> 
  						<Export-Package>pl.kwi.*</Export-Package>  						 
  					</instructions>
  				</configuration>
  			</plugin>
		  			  			
  			<!-- Plugin creating file *.zip with bundle for cq -->
  			<plugin>
				<groupId>org.apache.maven.plugins</groupId>
				<artifactId>maven-assembly-plugin</artifactId>
				<version>2.4</version>
				<configuration>
					<descriptors>
						<descriptor>src/main/assembly/${assembly.id}.xml</descriptor>
					</descriptors>
				</configuration>
				<executions>
					<execution>
						<id>${assembly.id}</id>
						<phase>package</phase>
						<goals>
							<goal>single</goal>
						</goals>
					</execution>
				</executions>
			</plugin>
							
			<!-- Plugin installing and deploying application on crx. 
			Command: mvn clean install crx:install -->
			<plugin>
		        <groupId>com.cognifide.maven.plugins</groupId>
		        <artifactId>maven-crx-plugin</artifactId>
		        <version>1.0.3</version>
		        <configuration>		        	        
		        	<packageFileName>${project.build.directory}/${project.build.finalName}-${assembly.id}.zip</packageFileName>
		          	<url>${crx.url}</url>
		          	<user>${crx.user}</user>
		          	<password>${crx.password}</password>
		        </configuration>
		      </plugin>
		      
		    <!-- Plugin for reading properties from
			external file -->
			<plugin>
		        <groupId>org.codehaus.mojo</groupId>
		        <artifactId>properties-maven-plugin</artifactId>
		        <version>1.0-alpha-2</version>
		        <executions>
		          <execution>
		            <phase>initialize</phase>
		            <goals>
		              <goal>read-project-properties</goal>
		            </goals>
		            <configuration>
		              <files>
		                <file>${project.properties.file}</file>
		              </files>
		            </configuration>
		          </execution>
		        </executions>
		      </plugin>
		      
		      <plugin>
		            <groupId>org.apache.maven.plugins</groupId>
		            <artifactId>maven-surefire-plugin</artifactId>
		            <version>2.16</version>
		            <configuration>			            	
		                <skip>true</skip>			                
		            </configuration>
		     </plugin>       
  						  
		</plugins>
	
  </build>
  
  
  
  <dependencies> 		
		
		<!-- Dependencies of Sling -->
		<dependency>
			<groupId>org.apache.sling</groupId>
			<artifactId>org.apache.sling.api</artifactId>
			<version>2.2.0</version>
			<scope>provided</scope>
		</dependency>
		
		<!-- Dependencies with annotations -->
		<dependency>
	    	<groupId>org.apache.felix</groupId>
	    	<artifactId>org.apache.felix.scr.annotations</artifactId>
	    	<version>1.2.0</version>
		</dependency>
		
		<!-- Dependencies of Servlet -->
		<dependency>
			<groupId>javax.servlet</groupId>
			<artifactId>servlet-api</artifactId>
			<version>2.4</version>
			<scope>provided</scope>
		</dependency>
				
		<!-- Dependencies with StringUtils
		Attention!!! 
		It has to be added to CQ by "install" folder -->
		<dependency>
			<groupId>commons-lang</groupId>
			<artifactId>commons-lang</artifactId>
			<version>2.5</version>
		</dependency>

		<!-- Dependencies with tests -->
		<dependency>
			<groupId>junit</groupId>
			<artifactId>junit</artifactId>
			<version>4.11</version>
			<scope>test</scope>
		</dependency>
		<dependency>
			<groupId>org.apache.sling</groupId>
			<artifactId>org.apache.sling.commons.testing</artifactId>
			<version>2.0.14</version>
			<scope>test</scope>
		</dependency>	
		<dependency>
			<groupId>org.seleniumhq.selenium</groupId>
			<artifactId>selenium-java</artifactId>
			<version>2.24.1</version>
			<scope>test</scope>
		</dependency>
		
  </dependencies>
  

    
</project>